#include <stdio.h>
#include "pico/stdlib.h"
#include "Video.h"
#include "Sound.h"

static const uint8_t MonoPattern[] = {
    //	ascii
	0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x04, 0x40,
	0xaa, 0x00, 0x00, 0x00, 0x44, 0xe4, 0xe4, 0x40,
	0x4e, 0xce, 0x6e, 0x40, 0x8a, 0x24, 0x8a, 0x20,
	0x4a, 0x48, 0xaa, 0x40, 0x44, 0x40, 0x00, 0x00,
	0x48, 0x88, 0x88, 0x40, 0x42, 0x22, 0x22, 0x40,
	0x0a, 0xa4, 0xaa, 0x00, 0x04, 0x4e, 0x44, 0x00,
	0x00, 0x00, 0x44, 0x80, 0x00, 0x0e, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x40, 0x02, 0x24, 0x88, 0x00,
	0x4a, 0xaa, 0xaa, 0x40, 0x44, 0x44, 0x44, 0x40,
	0x4a, 0x22, 0x48, 0xe0, 0x4a, 0x24, 0x2a, 0x40,
	0x2a, 0xae, 0x22, 0x20, 0xe8, 0x8c, 0x22, 0xc0,
	0x4a, 0x8c, 0xaa, 0x40, 0xea, 0x22, 0x44, 0x40,
	0x4a, 0xa4, 0xaa, 0x40, 0x4a, 0xa6, 0x2a, 0x40,
	0x04, 0x40, 0x44, 0x00, 0x04, 0x40, 0x44, 0x80,
	0x02, 0x48, 0x42, 0x00, 0x00, 0xe0, 0xe0, 0x00,
	0x08, 0x42, 0x48, 0x00, 0x4a, 0x24, 0x40, 0x40,
	0x4a, 0xaa, 0x88, 0x60, 0x4a, 0xaa, 0xea, 0xa0,
	0xca, 0xac, 0xaa, 0xc0, 0x4a, 0x88, 0x8a, 0x40,
	0xca, 0xaa, 0xaa, 0xc0, 0xe8, 0x8c, 0x88, 0xe0,
	0xe8, 0x8c, 0x88, 0x80, 0x68, 0x8a, 0xaa, 0x40,
	0xaa, 0xae, 0xaa, 0xa0, 0xe4, 0x44, 0x44, 0xe0,
	0x62, 0x22, 0x2a, 0x40, 0xae, 0xc8, 0xce, 0xa0,
	0x88, 0x88, 0x88, 0xe0, 0xae, 0xee, 0xaa, 0xa0,
	0xca, 0xaa, 0xaa, 0xa0, 0x4a, 0xaa, 0xaa, 0x40,
	0xca, 0xaa, 0xc8, 0x80, 0x4a, 0xaa, 0xac, 0x60,
	0xca, 0xaa, 0xca, 0xa0, 0x4a, 0x84, 0x2a, 0x40,
	0xe4, 0x44, 0x44, 0x40, 0xaa, 0xaa, 0xaa, 0xe0,
	0xaa, 0xaa, 0xa4, 0x40, 0xaa, 0xae, 0xee, 0xa0,
	0xaa, 0x44, 0x4a, 0xa0, 0xaa, 0xa4, 0x44, 0x40,
	0xe2, 0x24, 0x88, 0xe0, 0x64, 0x44, 0x44, 0x60,
	0x08, 0x84, 0x22, 0x00, 0xc4, 0x44, 0x44, 0xc0,
	0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
};

static const uint8_t wave1[] = {
    // SquareWave
    127,127,127,127,127,127,127,127,
    127,127,127,127,127,127,127,127,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
};
static const uint8_t wave2[] = {
    // BassWave
	178,171,153,128,102,77,57,39,
	25,12,3,0,3,13,25,35,
	39,35,25,13,3,0,3,12,
	25,39,57,77,102,128,153,171,
};
static const uint8_t wave3[] = {
	// PianoWave
	254,238,204,172,150,128,104,84,
	74,65,50,36,32,33,25,9,
	0,9,25,33,32,36,50,65,
	74,84,104,128,150,172,204,238,
};

static const uint8_t BGM_B[] = {
    N4,C4, N4,G4, N8,C4, N4,G4, N4,A4,
    N8,A4, N8,G4, N8,G4, N8,F4, N8,F4, N8,E4, N8,E4,
    N4,D4, N4,D4, N8,D4, N4,E4, N4P,D4,
    N2P,0,

    N4,C4, N4,G4, N8,C4, N4,G4, N4,A4,
    N8,A4, N8,G4, N8,G4, N8,F4, N8,F4, N8,E4, N8,E4,
    N4,F4, N4,F4, N8,F4, N4,A4, N4P,G4,
    N2P,0,

    N8,E4, N8,E4, N8,E4, N4,E4, N8,E4, N4,A4,
    N8,D4, N8,D4, N8,D4, N4,D4, N8,D4, N4,G4,
    N8,0, N8,A4, N8,0, N8,G4, N8,0, N8,F4, N8,0, N8,E4,
    N4,D4, N4,E4, N2,C4,

    0xff
};
static const uint8_t BGM_C[] = {
    N8,C3, N4,0, N4P,E3, N8,G3, N8,0, // 3
    N8,A2, N4,0, N4P,C3, N8,E3, N8,0, // 4
    N8,D3, N4,0, N4P,F3, N8,A3, N8,0, // 5
    N8,G2, N4,0, N4P,B2, N8,D3, N8,0, // 6

    N8,C3, N4,0, N4P,E3, N8,G3, N8,0, // 7
    N8,A2, N4,0, N4P,C3, N8,E3, N8,0, // 8
    N8,F3, N4,0, N8,F3, N8,G2, N4,0, N8,G2, // 9
    N8,C3, N4,0, N4P,E3, N8,G3, N8,0, // 10

    N8,C3, N4,0, N8,C3, N8,A2, N4,0, N8,A2, // 11
    N8,D3, N4,0, N8,D3, N8,G2, N4,0, N8,G2, // 12
    N8,0, N8,F2, N8,0, N8,F2, N8,0, N8,G2, N8,0, N8,G2,
    N8,C3, N4,0, N4P,E3, N8,G3, N8,0, // 14

    0xff
};

int main()
{
    Sound::Initialize();
    Video::Initialize();

    Sound::SetWave(1, wave3);
    Sound::SetWave(2, wave2);

    {
        auto pSource = MonoPattern;
        auto pDestination = Video::TilePattern();
        for (auto i = 0; i < 0x40 * 4; ++i) {
            auto source = *pSource++;
            for (auto j = 0; j < 4; ++j) {
                uint8_t destination = 0;
                if ((source & 0x80) != 0) {
                    destination |= 0xf0;
                }
                if ((source & 0x40) != 0) {
                    destination |= 0x0f;
                }
                *pDestination++ = destination;
                source <<=2;
            }
        }
    }

    for (auto i = 0; i < 1000; ++i) {
        Video::TileMap()[i] = i % 0x40;
    }
    gpio_init(16);
    gpio_set_dir(16, GPIO_OUT);

    Sound::StartMelody(BGM_B, BGM_C);

    auto y = 0;
    auto x = 0;
    while (true) {
        Video::ShowSprite(1, 4, y, 1);
        Video::ShowSprite(0, x, 10, 0);
        // gpio_put(16, true);
        // sleep_ms(300);
        // gpio_put(16, false);
        // sleep_ms(300);
        ++y;
        ++x;
        sleep_ms(100);
    }
}
