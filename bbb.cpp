#include <stdio.h>
#include "pico/stdlib.h"
#include "Video.h"

static const uint8_t MonoPattern[] = {
    //	ascii
	0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x04, 0x40,
	0xaa, 0x00, 0x00, 0x00, 0x44, 0xe4, 0xe4, 0x40,
	0x4e, 0xce, 0x6e, 0x40, 0x8a, 0x24, 0x8a, 0x20,
	0x4a, 0x48, 0xaa, 0x40, 0x44, 0x40, 0x00, 0x00,
	0x48, 0x88, 0x88, 0x40, 0x42, 0x22, 0x22, 0x40,
	0x0a, 0xa4, 0xaa, 0x00, 0x04, 0x4e, 0x44, 0x00,
	0x00, 0x00, 0x44, 0x80, 0x00, 0x0e, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x40, 0x02, 0x24, 0x88, 0x00,
	0x4a, 0xaa, 0xaa, 0x40, 0x44, 0x44, 0x44, 0x40,
	0x4a, 0x22, 0x48, 0xe0, 0x4a, 0x24, 0x2a, 0x40,
	0x2a, 0xae, 0x22, 0x20, 0xe8, 0x8c, 0x22, 0xc0,
	0x4a, 0x8c, 0xaa, 0x40, 0xea, 0x22, 0x44, 0x40,
	0x4a, 0xa4, 0xaa, 0x40, 0x4a, 0xa6, 0x2a, 0x40,
	0x04, 0x40, 0x44, 0x00, 0x04, 0x40, 0x44, 0x80,
	0x02, 0x48, 0x42, 0x00, 0x00, 0xe0, 0xe0, 0x00,
	0x08, 0x42, 0x48, 0x00, 0x4a, 0x24, 0x40, 0x40,
	0x4a, 0xaa, 0x88, 0x60, 0x4a, 0xaa, 0xea, 0xa0,
	0xca, 0xac, 0xaa, 0xc0, 0x4a, 0x88, 0x8a, 0x40,
	0xca, 0xaa, 0xaa, 0xc0, 0xe8, 0x8c, 0x88, 0xe0,
	0xe8, 0x8c, 0x88, 0x80, 0x68, 0x8a, 0xaa, 0x40,
	0xaa, 0xae, 0xaa, 0xa0, 0xe4, 0x44, 0x44, 0xe0,
	0x62, 0x22, 0x2a, 0x40, 0xae, 0xc8, 0xce, 0xa0,
	0x88, 0x88, 0x88, 0xe0, 0xae, 0xee, 0xaa, 0xa0,
	0xca, 0xaa, 0xaa, 0xa0, 0x4a, 0xaa, 0xaa, 0x40,
	0xca, 0xaa, 0xc8, 0x80, 0x4a, 0xaa, 0xac, 0x60,
	0xca, 0xaa, 0xca, 0xa0, 0x4a, 0x84, 0x2a, 0x40,
	0xe4, 0x44, 0x44, 0x40, 0xaa, 0xaa, 0xaa, 0xe0,
	0xaa, 0xaa, 0xa4, 0x40, 0xaa, 0xae, 0xee, 0xa0,
	0xaa, 0x44, 0x4a, 0xa0, 0xaa, 0xa4, 0x44, 0x40,
	0xe2, 0x24, 0x88, 0xe0, 0x64, 0x44, 0x44, 0x60,
	0x08, 0x84, 0x22, 0x00, 0xc4, 0x44, 0x44, 0xc0,
	0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
};

int main()
{
    Video::Initialize();

    {
        auto pSource = MonoPattern;
        auto pDestination = Video::TilePattern();
        for (auto i = 0; i < 0x40 * 4; ++i) {
            auto source = *pSource++;
            for (auto j = 0; j < 4; ++j) {
                uint8_t destination = 0;
                if ((source & 0x80) != 0) {
                    destination |= 0xf0;
                }
                if ((source & 0x40) != 0) {
                    destination |= 0x0f;
                }
                *pDestination++ = destination;
                source <<=2;
            }
        }
    }

    for (auto i = 0; i < 1000; ++i) {
        Video::TileMap()[i] = i % 0x40;
    }

    gpio_init(16);
    gpio_set_dir(16, GPIO_OUT);
    while (true) {
        gpio_put(16, true);
        sleep_ms(500);
        gpio_put(16, false);
        sleep_ms(500);
    }
}
